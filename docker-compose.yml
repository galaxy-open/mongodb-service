version: '3.8'

services:
  # Database migrations (runs once on deployment)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: migrations
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
    command: ["npm", "run", "migration:run"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network
    restart: "no"  # Only run once

  # Database
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Application (Web Server)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: unless-stopped
    ports:
      - "${PORT:-3333}:3333"
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      HOST: 0.0.0.0
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - network
    volumes:
      - ./storage:/app/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: queue
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
    command: ["npm", "run", "queue:listen"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - network
    volumes:
      - ./storage:/app/storage

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scheduler
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
    command: ["npm", "run", "scheduler:run"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - network
    volumes:
      - ./storage:/app/storage

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  network:
    driver: bridge
